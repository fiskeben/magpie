// Code generated by go-bindata.
// sources:
// migrate/steps/1530481718_create-table-configurations.down.sql
// migrate/steps/1530481718_create-table-configurations.up.sql
// migrate/steps/1530481882_create-table-whitelists.down.sql
// migrate/steps/1530481882_create-table-whitelists.up.sql
// migrate/steps/1530481962_create-table-blacklists.down.sql
// migrate/steps/1530481962_create-table-blacklists.up.sql
// migrate/steps/README.md
// migrate/steps/bindata.go
// DO NOT EDIT!

package steps

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrateSteps1530481718_createTableConfigurationsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\xce\xcf\x4b\xcb\x4c\x2f\x2d\x4a\x2c\xc9\xcc\xcf\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\x69\x70\x4b\x59\x1b\x00\x00\x00")

func migrateSteps1530481718_createTableConfigurationsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrateSteps1530481718_createTableConfigurationsDownSql,
		"migrate/steps/1530481718_create-table-configurations.down.sql",
	)
}

func migrateSteps1530481718_createTableConfigurationsDownSql() (*asset, error) {
	bytes, err := migrateSteps1530481718_createTableConfigurationsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/1530481718_create-table-configurations.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1530482089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateSteps1530481718_createTableConfigurationsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\xaa\xc3\x30\x0c\x85\xe1\x3d\x4f\x71\xc6\x04\xee\x74\x21\x53\x1f\x26\x28\x8e\xda\xaa\xb5\xe5\x20\x29\x86\xbc\x7d\xa1\xee\xd0\xce\xdf\x0f\xe7\x24\x63\x0a\x46\xd0\x9a\x19\xa9\xea\x55\x6e\x87\x51\x48\x55\xc7\x38\x00\x80\x6c\x70\x36\xa1\x8c\xdd\xa4\x90\x9d\x78\xf2\xf9\xf7\x26\x67\x6b\x92\x78\x51\x2a\x8c\x46\x96\xee\x64\xe3\xff\x3c\x4f\xd0\x1a\xd0\x23\xe7\xde\x35\x36\x97\xaa\x3f\x49\x97\x3e\xbf\x2d\x14\x08\x29\xec\x41\x65\xff\xc8\xf7\x17\x3c\xbc\xea\x3a\x4c\x97\xe1\x15\x00\x00\xff\xff\x0a\x9a\xb1\x59\xb0\x00\x00\x00")

func migrateSteps1530481718_createTableConfigurationsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrateSteps1530481718_createTableConfigurationsUpSql,
		"migrate/steps/1530481718_create-table-configurations.up.sql",
	)
}

func migrateSteps1530481718_createTableConfigurationsUpSql() (*asset, error) {
	bytes, err := migrateSteps1530481718_createTableConfigurationsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/1530481718_create-table-configurations.up.sql", size: 176, mode: os.FileMode(420), modTime: time.Unix(1530482600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateSteps1530481882_createTableWhitelistsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\xcf\xc8\x2c\x49\xcd\xc9\x2c\x2e\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x82\x50\x17\x53\x17\x00\x00\x00")

func migrateSteps1530481882_createTableWhitelistsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrateSteps1530481882_createTableWhitelistsDownSql,
		"migrate/steps/1530481882_create-table-whitelists.down.sql",
	)
}

func migrateSteps1530481882_createTableWhitelistsDownSql() (*asset, error) {
	bytes, err := migrateSteps1530481882_createTableWhitelistsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/1530481882_create-table-whitelists.down.sql", size: 23, mode: os.FileMode(420), modTime: time.Unix(1530482100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateSteps1530481882_createTableWhitelistsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xc9\x31\x0a\x02\x31\x10\x05\xd0\x3e\xa7\xf8\xe5\x2e\x58\x09\x5b\x79\x18\x19\xe3\x87\x1d\x9c\x44\x99\x19\x23\xb9\xbd\xa0\xe5\xb6\xef\x55\xa7\x24\x91\x72\x33\xe2\xb3\x6b\xd2\x34\x32\xb0\x14\x00\xd0\x3b\x82\xae\x62\x78\xb9\x36\xf1\x89\x07\xe7\xe9\x57\x41\x1f\x5a\x79\xed\xd2\x88\x21\x5e\x77\xf1\xe5\xbc\x6d\xeb\xbf\x0f\x8c\xfe\x4c\xf4\xb7\x59\x59\x2f\xe5\x1b\x00\x00\xff\xff\x47\x12\x8e\xa5\x76\x00\x00\x00")

func migrateSteps1530481882_createTableWhitelistsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrateSteps1530481882_createTableWhitelistsUpSql,
		"migrate/steps/1530481882_create-table-whitelists.up.sql",
	)
}

func migrateSteps1530481882_createTableWhitelistsUpSql() (*asset, error) {
	bytes, err := migrateSteps1530481882_createTableWhitelistsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/1530481882_create-table-whitelists.up.sql", size: 118, mode: os.FileMode(420), modTime: time.Unix(1530482765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateSteps1530481962_createTableBlacklistsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\xca\x49\x4c\xce\xce\xc9\x2c\x2e\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x92\xc4\x89\xb9\x17\x00\x00\x00")

func migrateSteps1530481962_createTableBlacklistsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrateSteps1530481962_createTableBlacklistsDownSql,
		"migrate/steps/1530481962_create-table-blacklists.down.sql",
	)
}

func migrateSteps1530481962_createTableBlacklistsDownSql() (*asset, error) {
	bytes, err := migrateSteps1530481962_createTableBlacklistsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/1530481962_create-table-blacklists.down.sql", size: 23, mode: os.FileMode(420), modTime: time.Unix(1530482108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateSteps1530481962_createTableBlacklistsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xc9\x31\x0a\xc2\x40\x10\x05\xd0\x7e\x4f\xf1\xcb\x04\xac\x84\x54\x1e\x46\x7e\xd6\x0f\x0e\x99\xac\x32\x3b\x06\xf6\xf6\x82\x96\x69\xdf\xab\x21\xa6\x90\x5c\x5d\x58\x9d\x75\x73\xeb\xd9\x31\x15\x00\xb0\x07\xba\xc2\xe8\x78\x87\xed\x8c\x81\x4d\xe3\xf2\xab\xae\x38\xac\xea\xde\xb8\x0b\x07\xa3\x3e\x19\xd3\x75\x59\xe6\x7f\x9f\x18\xed\x95\x68\x1f\xf7\x32\xdf\xca\x37\x00\x00\xff\xff\xe2\x6f\x37\x7b\x76\x00\x00\x00")

func migrateSteps1530481962_createTableBlacklistsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrateSteps1530481962_createTableBlacklistsUpSql,
		"migrate/steps/1530481962_create-table-blacklists.up.sql",
	)
}

func migrateSteps1530481962_createTableBlacklistsUpSql() (*asset, error) {
	bytes, err := migrateSteps1530481962_createTableBlacklistsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/1530481962_create-table-blacklists.up.sql", size: 118, mode: os.FileMode(420), modTime: time.Unix(1530482757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateStepsReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x41\x4e\xc4\x30\x0c\x45\xf7\x3e\x85\xa5\x6e\x18\x69\x5a\xf6\xac\x81\x25\x57\x60\x3c\x8d\xd3\x46\x4a\xe2\x60\xbb\xad\xd0\x30\x77\x47\x11\x12\xb0\xf5\x7f\x7e\x6f\xc0\x67\x72\xba\x92\x31\x96\xb4\x28\x79\x92\x6a\x00\xc3\x80\x6f\x54\x52\x5d\x70\x96\xba\x73\xed\x67\x80\x57\x51\x64\x9a\xd7\x3f\x14\x67\x65\x72\x46\x3f\x04\x63\xca\x6c\x67\x04\xa9\x8c\x51\xf4\x67\x4a\x75\x79\xa4\xec\xac\xdd\x65\xbe\xc5\x88\x0f\x5b\x3b\x9d\x7f\x29\xe5\x9d\xd5\xff\xad\x41\x8e\x7a\x9a\x00\x5e\x7a\xa8\x3b\xd1\x56\xd9\x72\xc0\x2b\x63\xa5\xc2\x01\xc9\x30\x4a\xce\x72\xd8\x13\xc0\xe5\xe6\xa9\xb0\x39\x95\x76\x7f\x5f\x3f\xdb\xca\x75\x34\x6e\xa4\xe4\x1c\xc6\xc0\x36\x6b\x6a\x9e\x76\x1e\xfb\xf3\x74\xdb\xda\x57\x2f\xdc\x27\xfb\xc8\x17\xf8\x0e\x00\x00\xff\xff\xab\x6c\xc5\x4c\xff\x00\x00\x00")

func migrateStepsReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_migrateStepsReadmeMd,
		"migrate/steps/README.md",
	)
}

func migrateStepsReadmeMd() (*asset, error) {
	bytes, err := migrateStepsReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/README.md", size: 255, mode: os.FileMode(420), modTime: time.Unix(1530484844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateStepsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\x46\x16\x7e\x16\x7f\xc5\x54\x40\x0b\x69\xe1\xc8\xbc\x5f\x04\xf8\x61\x13\x7b\x81\x3c\x24\x05\x9a\x14\xfb\xb0\x67\x11\x0c\xc9\xa1\x4a\x54\x12\x15\x91\x6a\x8e\x1d\xf8\xbf\x17\x1f\xcf\xc8\x91\xe3\xda\x52\xe5\x4b\x1f\x68\x91\x43\x9e\xcb\x1c\xf2\xfb\xce\x37\xe3\xd3\x53\xf5\xa6\x29\x8d\x9a\x99\xa5\x59\xeb\xce\x94\x2a\xbf\x54\xb3\xe6\x55\x5e\x2f\x4b\xdd\xe9\x89\x73\x7a\xaa\xda\x66\xb3\x2e\x4c\x3b\xc5\xf9\xa2\x9e\xe1\xb1\xd3\xb6\x33\xab\xf6\xd4\x8b\x02\x37\x4c\xbd\xc4\x4b\x3f\x15\x6b\xa3\x3b\xf3\xaa\xd3\xf9\xdc\xbc\x2a\x9a\x65\x55\xcf\x36\x6b\xdd\xd5\xcd\xb2\x9d\x94\xcd\x97\xe5\xa4\xfd\x3c\x3f\xda\xc1\x66\xf5\xa0\x79\x9a\xfa\xb7\xcd\xbf\xfc\x56\x77\x66\x5e\xb7\xdd\x01\xb1\x1f\x32\xde\x13\x37\x8b\xbf\x33\xcd\xe7\xba\xf8\xfd\xc0\xb8\x0f\x19\xdf\x17\xf7\x97\x8b\x7f\x9f\xbf\xbb\x98\x2c\xca\xbb\xb7\xb6\x2f\x6c\xd6\xe0\xde\xf9\xcf\xea\xfd\xcf\x1f\xd5\xc5\xf9\xdb\x8f\x3f\x38\xce\x4a\x17\xbf\xeb\x99\x51\xfd\x93\x8e\x53\x2f\x56\xcd\xba\x53\x23\x67\x30\xcc\x2f\x3b\xd3\x0e\x9d\xc1\xb0\x68\x16\xab\xb5\x69\xdb\xd3\xd9\x55\xbd\xc2\x40\xb5\xe8\xf0\x53\x37\xf2\xf7\xb4\x6e\x36\x5d\x3d\xc7\x45\xd3\x1b\xac\x74\xf7\xdb\x69\x55\xcf\x0d\x4e\x30\xd0\x76\xeb\x7a\x39\xeb\xef\x75\xf5\xc2\x0c\x9d\xb1\xe3\x54\x9b\x65\xa1\x6c\x66\xbf\x18\x5d\x8e\x70\xa2\xfe\xf7\x7f\x84\x3d\x51\x4b\xbd\x40\x4e\x30\x1b\xab\xd1\x76\xd4\xac\xd7\xcd\x7a\xac\xbe\x3a\x83\xd9\x55\x7f\xa5\xa6\x67\x0a\x59\x4d\xde\x9b\x2f\x70\x62\xd6\xa3\x3e\x6d\x5c\xbf\xde\x54\x95\x59\xf7\x6e\xc7\x63\x67\x50\x57\xbd\xc1\x0f\x67\x6a\x59\xcf\xe1\x62\xb0\x36\xdd\x66\xbd\xc4\xe5\x89\xaa\x16\xdd\xe4\x02\xde\xab\xd1\x10\x8e\xd4\x8f\x9f\xa7\xea\xc7\x3f\x86\x92\x49\x1f\x6b\xec\x0c\xae\x1d\x67\xf0\x87\x5e\xab\x7c\x53\x29\x89\x23\x41\x9c\xc1\x27\x49\xe7\x4c\xd5\xcd\xe4\x4d\xb3\xba\x1c\xfd\x94\x6f\xaa\x13\x35\xbb\x1a\x3b\x83\x62\x7e\xb1\xcd\x74\xf2\x66\xde\xb4\x66\x34\x76\x9e\x2a\x1f\xb8\x11\xff\xf7\x38\x32\xeb\xb5\xe4\x6d\x07\xf3\x4d\x35\x79\x8d\xd4\x47\xe3\x13\x3c\xe1\x5c\x3b\x4e\x77\xb9\x32\x4a\xb7\xad\xe9\x50\xf2\x4d\xd1\xc1\x4b\x3f\x3f\xfb\x3e\x9c\x41\xbd\xac\x1a\xa5\x9a\x76\xf2\x9f\x7a\x6e\xde\x2e\xab\xe6\xc6\xce\xbe\xc2\xed\xf8\x8e\x87\xfe\x1d\x2a\x65\x5f\xa3\x33\x68\xeb\xab\xfe\xba\x5e\x76\x71\xe8\x0c\x16\xe0\x16\x75\xe3\xf4\x5d\x53\x9a\x7e\xf0\x63\xbd\x30\x0a\x9f\xc9\x04\x67\x88\xd3\x7f\x2a\xa3\xaa\xfe\x3e\xd6\x58\xbd\xd7\x0b\x33\x1a\xdb\x08\x88\x69\x67\x59\xd5\x13\x44\x77\xae\x1f\xb0\xfd\x50\x5f\xc1\xb6\xcf\xe6\xb6\x29\x12\x7d\xd0\x14\xb9\x8e\xc6\xbb\x99\xdf\x76\x80\xa9\xed\x73\x80\xc9\x8d\xc6\xdf\x26\x7a\xc7\x83\x9d\xfd\xfd\x4e\xde\xb6\xe7\xf5\x7a\x34\x56\x79\xd3\xcc\x77\xad\xf5\xbc\xdd\x33\xf3\xcb\x56\x26\x6e\xd6\x95\x2e\xcc\xd7\xeb\x1d\x6b\xfb\x49\xe0\x2b\xff\x64\x59\xe4\x03\xa8\xe1\x0e\x1b\x7f\x04\x31\xbd\xb9\xc5\xc5\xe7\xcd\x97\xe5\x87\xcf\x73\x75\x66\x3f\x9b\xd1\x90\xd8\xab\x88\xd3\x9c\xd8\x4d\x89\x5d\xf7\xaf\x8f\xaa\x22\x0e\x35\xb1\x9f\x11\x17\xf8\xad\x88\x23\x97\xd8\x4f\x89\xc3\x8c\x38\x2c\x64\x1c\xe7\x51\x44\x1c\xa6\xc4\x85\x21\x2e\x60\x97\x13\x17\xb9\x3c\x03\x3b\xbf\xb4\xbe\x60\x03\x7f\x85\x3c\xe7\xe7\xc4\x79\x4c\x6c\x62\x62\xd7\x27\x76\xc3\xdb\xf1\x71\xc4\x19\x71\xe2\x8a\xcf\x28\x23\xf6\xf2\xdd\x3c\x87\x5b\xd2\x3a\xb2\x2c\x16\x75\x7f\xc5\x66\x5b\x6c\xee\xb0\xa1\x33\x18\x1c\x5b\xff\x13\x67\x30\x18\x3e\xaa\x19\x0f\x4f\x9c\xc1\xf8\x06\x79\x47\xa6\x81\xa9\xfe\xab\x67\x95\xdd\xa9\xf6\xb4\x72\xc3\xdd\x8f\x2b\xe5\x3e\x12\xbd\xe1\xbe\x9e\xbd\xa6\x67\xdf\x23\xe1\x2b\x38\x62\xaa\x1e\x5b\x2b\x05\xbe\x98\x2a\x3f\x39\x51\x00\xfe\x74\x97\x17\x46\xa1\xef\x8e\xfb\x71\xc0\x79\x2a\x70\xff\x75\x59\xf3\x48\xc2\xf8\x6e\x9a\x9d\x28\x77\x7c\xed\x0c\x34\x32\xfc\xa9\x2f\xd8\xd7\xbe\x4a\x53\x65\x8b\x85\xf4\xa7\xfd\xdf\xeb\x9b\x6f\x45\x9f\x3c\x0a\xaa\xbf\xae\x8e\x05\x6a\x14\x0a\xf8\x72\x8f\x58\x6b\xe2\x22\x20\x0e\x70\xbf\x20\x4e\x23\x62\xe3\x11\x07\x00\x61\x45\x9c\x78\xc4\x45\x2c\x60\x33\x86\x38\x09\x89\x7d\x8f\x38\x0a\x24\x9e\x1f\x0b\xc8\x53\x43\x5c\x6a\xf1\x97\xc3\x47\x44\xec\xbb\x42\x08\x69\x4c\x9c\x17\xc4\x49\x49\xac\x3d\xf1\x53\xba\x92\x43\x59\x11\xbb\x15\xb1\x49\x88\xfd\x90\x38\x0e\x88\x5d\x10\x45\x2c\xcf\x64\x9a\xd8\xcb\x88\x75\x46\x6c\xb4\x90\x47\x6c\x88\xd3\x84\x38\xf2\x84\x48\x30\x56\x24\xc4\x81\x9d\x77\xea\x12\xc7\x85\x10\x41\x10\x4b\xcc\xb4\x20\x2e\x11\x3f\x24\xce\xe0\xb7\x24\x4e\x52\xe2\xca\x27\xae\x32\xe2\x2a\x91\xb9\xc4\x09\x71\x9c\x13\x67\xbe\xdc\x47\x0c\x5f\x8b\x3d\x72\xca\x62\xc9\x3f\x46\x3d\x02\xa9\x67\x50\x48\xad\x90\xaf\xa7\xe5\xd7\x0f\x64\x4e\xa5\x21\x0e\x22\xc9\x23\x4b\xa4\x3e\x41\x25\x44\x88\xeb\x00\xef\xc1\x92\x9e\x17\xca\xbb\x43\xcd\x0c\x7c\x7a\xc4\x71\x24\x31\x8a\x54\x72\xf4\x12\x89\x87\x7a\xa2\x1e\x81\x16\xe2\x84\x2f\xbc\x37\x2f\xba\x4b\x8a\xa8\x27\xea\x88\xf7\x0d\x52\xcc\xdd\x27\x21\xc5\xfe\x03\x7c\x7e\x4a\xec\xc3\x1c\x4f\x88\x22\xb6\x1f\x47\x87\x7d\x0a\xcf\x41\x86\xbb\x25\xfc\x47\xa9\x70\x5b\x25\x4b\x84\x5e\x12\x1f\xc3\x84\xb1\xeb\x3e\x13\x13\x7e\x5b\xc6\xf5\x55\xfc\xef\xcd\x22\xee\xa5\x04\x0b\xc6\x0b\x8b\x43\x08\x13\x8c\x17\xa5\x08\x14\x5c\xfb\x46\x7c\xed\x13\x28\xa9\x2f\x71\x80\xe3\x9e\x43\x93\x43\xb1\xb8\xaf\x04\x4f\x82\xc4\x7d\x41\xee\xc7\xe1\x21\xab\xf4\xbd\x28\xdc\x17\xfe\x48\x0c\x1e\x58\xba\x67\x45\xe0\x61\xf5\xd9\x0a\x91\xe0\x18\xf8\x79\x2f\x0f\xbf\xe3\x45\x08\x1a\x28\xc0\x13\x78\xd2\xa0\x00\x18\x9c\x7b\x78\x26\x92\x26\x8a\xe6\xa8\x13\xe2\x2a\xb5\x82\xc2\x10\x47\xf0\x0b\x50\xe6\xc4\x09\x14\x7e\x2a\x02\x01\xcd\x18\xa2\xc0\x2b\x89\x33\x00\x14\x8d\x3e\x93\x7b\x68\xc6\x39\xc0\x09\x01\xe0\x8a\xaf\x1e\xa8\x95\x80\x5b\x5b\xf1\x91\x79\xc4\x09\xf2\x40\xf3\xf6\x89\xf3\x40\xc4\x40\x89\xb1\x90\x38\xf0\xa5\x79\x7a\x16\xd8\x7d\x8e\xb9\x80\x5a\x43\x14\x58\xd1\x80\x58\x68\xf8\x15\x84\x47\x46\xec\x26\x22\x06\x0c\xf2\x4e\xa4\xb1\xa3\x4e\x91\x96\x39\x98\x52\x62\xa4\xa9\x15\x57\x10\x5a\x89\xd8\xf7\xb9\x16\xc4\x71\x49\x6c\x72\x11\x0b\x10\x4c\x10\x24\x95\x11\xa2\xaa\x42\xe2\x3c\x91\xe6\x8e\x03\x64\x06\xbb\xdd\xd5\xcf\x96\x80\x42\xd4\xc8\x17\xc1\xa6\x23\xe2\x24\x7e\x34\x01\x3d\x9d\x10\x78\x38\xc4\x71\xe4\x73\xa0\x00\x78\x38\xf4\x53\x13\xcf\x8b\x35\xfe\x43\x2a\xb3\x6d\xfa\x5e\x7a\x0c\xeb\x24\x71\xf4\x4c\xac\xf3\x6d\x0f\xb5\xaf\xde\xeb\x9b\x1d\xd4\x17\xdd\xa5\xd0\x3b\xf7\x8c\x3d\xfe\x66\xd3\xc7\x62\xa2\x08\x85\x0b\xc0\x0d\x87\x37\xfd\x7d\x25\x78\x12\xd4\xed\x0b\x72\x3f\xee\x0e\xd9\x22\xdf\x8b\xbc\x7d\xe1\x8f\xc4\xde\x81\xa5\x7b\x56\xf4\x1d\x56\x9f\x47\x36\xfd\xf4\xa5\xe1\xf7\x74\x4d\xbf\xf0\x89\x43\xf7\x76\xd3\x4f\x8c\xac\xa6\xd1\xfc\x8a\x5c\x00\xa5\x0b\xe2\x34\x94\x9d\x0b\xcf\xc8\x4a\x1c\xcf\x95\xb1\x34\x43\xd7\x48\xb3\xc7\x73\x68\xd2\x68\xca\x2e\x1a\xb0\x3d\xd0\xa0\xb1\x72\x8f\x33\xd9\x71\xd0\xb9\x34\x5a\x1d\xcb\x6e\x40\x54\x10\x47\xa5\x88\x8b\x7e\x67\x00\x8d\x31\x90\x86\x5b\xda\x7c\xb7\x2b\xeb\x7e\xf5\x9c\x10\xe7\x36\x7f\x93\x4a\xd3\x87\xf8\x40\x23\x47\x63\x4e\x3d\xe2\xb0\xb4\x3b\x04\xbe\xc4\x83\x40\x08\x52\xc9\x11\x2b\xf7\x12\x2b\x7f\xd4\x2b\x17\x7f\x3a\x10\xc1\x03\xc1\x52\x06\x92\x03\x9a\x39\x88\x25\x01\x89\x54\x22\x76\x10\x23\x8b\x88\xe3\x54\xea\x5e\x25\x32\x67\xcc\x0b\x64\x15\x24\x77\x09\x08\x62\x26\xae\xe4\x5e\x92\xff\x9d\xa6\xff\xf0\x47\xf0\xbc\xf4\xb3\xa7\xe9\xef\xff\x17\xdb\xf1\xd4\xf3\x98\xa6\x7f\x50\xc9\xfe\x31\xda\x79\xa2\xa6\x1f\x25\x4f\xcd\x3a\xf8\x44\x16\xe6\x5d\x79\x5c\x57\x07\xe8\x4a\x51\xd6\xa1\x91\x6e\xbb\xdd\xd2\x0c\x23\x0b\x12\x23\xdb\x9b\xda\x6e\x21\x02\x4c\x20\x04\xa8\x70\x90\x84\xb6\xc0\xf5\x23\x51\xe9\xb1\x2b\x5b\x6d\xf0\x0b\x40\x82\x74\xa0\x1e\x7a\x30\x81\x08\x00\xea\xd2\xae\x02\x5c\x51\xec\xbd\xba\xf6\x44\x61\x83\x28\xaa\x48\xc0\x0b\xb2\x02\x00\x0b\x57\xb6\x18\xb1\xca\x00\x81\x64\x76\xd5\x03\x72\xca\x43\x51\x22\x58\x11\x60\x3c\xd6\x32\xbf\x22\xb0\x5b\x9a\x76\xeb\x36\xf2\x85\xac\x12\xd7\xda\x69\x4b\x56\xa5\xf8\xc6\xb3\x91\x6c\x8f\xfe\x19\x00\x00\xff\xff\xce\x6c\x8e\xc0\x00\x20\x00\x00")

func migrateStepsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateStepsBindataGo,
		"migrate/steps/bindata.go",
	)
}

func migrateStepsBindataGo() (*asset, error) {
	bytes, err := migrateStepsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate/steps/bindata.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1530485039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrate/steps/1530481718_create-table-configurations.down.sql": migrateSteps1530481718_createTableConfigurationsDownSql,
	"migrate/steps/1530481718_create-table-configurations.up.sql": migrateSteps1530481718_createTableConfigurationsUpSql,
	"migrate/steps/1530481882_create-table-whitelists.down.sql": migrateSteps1530481882_createTableWhitelistsDownSql,
	"migrate/steps/1530481882_create-table-whitelists.up.sql": migrateSteps1530481882_createTableWhitelistsUpSql,
	"migrate/steps/1530481962_create-table-blacklists.down.sql": migrateSteps1530481962_createTableBlacklistsDownSql,
	"migrate/steps/1530481962_create-table-blacklists.up.sql": migrateSteps1530481962_createTableBlacklistsUpSql,
	"migrate/steps/README.md": migrateStepsReadmeMd,
	"migrate/steps/bindata.go": migrateStepsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrate": &bintree{nil, map[string]*bintree{
		"steps": &bintree{nil, map[string]*bintree{
			"1530481718_create-table-configurations.down.sql": &bintree{migrateSteps1530481718_createTableConfigurationsDownSql, map[string]*bintree{}},
			"1530481718_create-table-configurations.up.sql": &bintree{migrateSteps1530481718_createTableConfigurationsUpSql, map[string]*bintree{}},
			"1530481882_create-table-whitelists.down.sql": &bintree{migrateSteps1530481882_createTableWhitelistsDownSql, map[string]*bintree{}},
			"1530481882_create-table-whitelists.up.sql": &bintree{migrateSteps1530481882_createTableWhitelistsUpSql, map[string]*bintree{}},
			"1530481962_create-table-blacklists.down.sql": &bintree{migrateSteps1530481962_createTableBlacklistsDownSql, map[string]*bintree{}},
			"1530481962_create-table-blacklists.up.sql": &bintree{migrateSteps1530481962_createTableBlacklistsUpSql, map[string]*bintree{}},
			"README.md": &bintree{migrateStepsReadmeMd, map[string]*bintree{}},
			"bindata.go": &bintree{migrateStepsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

